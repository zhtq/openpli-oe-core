diff --git a/Makefile.in b/Makefile.in
index 3c5de7c..79dda9e 100644
--- a/Makefile.in
+++ b/Makefile.in
@@ -211,6 +211,9 @@ endif
 ifeq (@USE_OMXPLAYER@,1)
 DIRECTORY_ARCHIVES += xbmc/cores/omxplayer/omxplayer.a
 endif
+ifeq (@USE_HIPLAYER@,1)
+DIRECTORY_ARCHIVES += xbmc/cores/HiPlayer/HiPlayer.a
+endif
 
 LIB_DIRS=\
 	lib/libexif \
diff --git a/configure.ac b/configure.ac
index 71e942b..b6d39a3 100644
--- a/configure.ac
+++ b/configure.ac
@@ -486,6 +486,12 @@ AC_ARG_ENABLE([libav-compat],
   [use_libav_hacks=$enableval],
   [use_libav_hacks=no])
 
+AC_ARG_WITH([gpu],
+  [AS_HELP_STRING([--with-gpu],
+  [enable Graphics card (default is yes)])],
+  [use_gpu=$with_gpu],
+  [use_gpu=yes])
+
 ### End of external library options
 
 if test "x$host_vendor" != "xapple"; then
@@ -619,7 +625,7 @@ case $host in
      use_neon=yes
      use_gles=yes
      use_gl=no
-     USE_STATIC_FFMPEG=1
+     USE_STATIC_FFMPEG=0
      ;;
   aarch64*-*-linux-gnu*|aarch64*-*-linux-uclibc*|aarch64*-*-linux-musl*)
      target_platform=target_linux
@@ -633,7 +639,7 @@ case $host in
        use_gl=no
        use_gles=yes
      fi
-     USE_STATIC_FFMPEG=1
+     USE_STATIC_FFMPEG=0
      ;;
   arm*-*linux-android*)
      target_platform=target_android
@@ -652,10 +658,11 @@ case $host in
      CORE_SYSTEM_NAME=linux
      ARCH="mips"
      use_arch="mips"
-     use_gles=no
-     use_gl=yes
-     use_sdl=yes
-     USE_STATIC_FFMPEG=1
+     use_neon=yes
+     use_gles=yes
+     use_gl=no
+     use_sdl=no
+     USE_STATIC_FFMPEG=0
      ;;
   *)
      AC_MSG_ERROR(unsupported host ($host))
@@ -696,6 +703,42 @@ if test "$target_platform" = "target_raspberry_pi" ; then
      CXXFLAGS="$CXXFLAGS"
 fi
 
+if test "$with_gpu" = "v3d"; then
+     use_openmax=no
+     USE_OMXLIB=0; AC_DEFINE([HAVE_OMXLIB],[0],["Define to 1 if OMX libs is enabled"])
+     USE_V3D=1; AC_DEFINE([HAS_V3D],[1],["Define to 1 if V3D GPU"])
+     USE_E2_REMOTE=1; AC_DEFINE([HAS_E2_REMOTE],[1],["Define to 1 if use E2 REMOTE CONTROLLER"])
+     AC_DEFINE([HAS_BRCMCPU], [1], [Whether to use Broadcom platform workaround.])
+fi
+
+if test "$with_gpu" = "v3dplatform"; then
+     use_openmax=no
+     USE_OMXLIB=0; AC_DEFINE([HAVE_OMXLIB],[0],["Define to 1 if OMX libs is enabled"])
+     USE_V3D=1; AC_DEFINE([HAS_V3D],[1],["Define to 1 if V3D GPU"])
+     USE_E2_REMOTE=1; AC_DEFINE([HAS_E2_REMOTE],[1],["Define to 1 if use E2 REMOTE CONTROLLER"])
+     AC_DEFINE([HAS_BRCMCPU], [1], [Whether to use Broadcom platform workaround.])
+     AC_DEFINE([HAS_V3DVISABLE], [1], [Whether to use EGLNative visable workaround.])
+fi
+
+if test "$with_gpu" = "v3dvuplus"; then
+     use_openmax=no
+     USE_OMXLIB=0; AC_DEFINE([HAVE_OMXLIB],[0],["Define to 1 if OMX libs is enabled"])
+     USE_V3D=1; AC_DEFINE([HAS_V3D],[1],["Define to 1 if V3D GPU"])
+     USE_E2_REMOTE=1; AC_DEFINE([HAS_E2_REMOTE],[1],["Define to 1 if use E2 REMOTE CONTROLLER"])
+     AC_DEFINE([HAS_BRCMCPU], [1], [Whether to use Broadcom platform workaround.])
+fi
+
+if test "$with_gpu" = "mali"; then
+     use_openmax=no
+     USE_OMXLIB=0; AC_DEFINE([HAVE_OMXLIB],[0],["Define to 1 if OMX libs is enabled"])
+     USE_MALI=1; AC_DEFINE([HAS_MALI],[1],["Define to 1 if Mali GPU"])
+     USE_E2_REMOTE=1; AC_DEFINE([HAS_E2_REMOTE],[1],["Define to 1 if use E2 REMOTE CONTROLLER"])
+fi
+
+if test "$add_players" = "hiplayer"; then
+     USE_HIPLAYER=1; AC_DEFINE([HAS_HIPLAYER],[1],["Define to 1 if Hiplayer is available"])
+fi
+
 if test "$host_vendor" = "apple"; then
   use_avahi=no
   use_alsa=no
@@ -912,6 +955,9 @@ if test "x$have_builtin_sync_val_compare_and_swap" = "xyes"; then
         [Define to 1 if your compiler supports the __sync_val_compare_and_swap() intrinsic.])
 fi
 
+# check if libatomic is available
+AC_CHECK_LIB([atomic], [__atomic_add_fetch_8], [LIBS="$LIBS -latomic"],)
+
 # Check for u16string/u32string declarations
 AC_LANG_PUSH([C++])
 AC_CHECK_TYPES([std::u16string, std::u32string], [], [], [[#include <string>]])
@@ -944,16 +990,34 @@ if test "$use_gles" = "yes"; then
     AC_DEFINE([HAVE_LIBEGL],[1],["Define to 1 if you have the `EGL' library (-lEGL)."])
     AC_DEFINE([HAVE_LIBGLESV2],[1],["Define to 1 if you have the `GLESv2' library (-lGLESv2)."])
     AC_MSG_RESULT(== WARNING: OpenGLES support is assumed.)
+  elif test "$target_platform" = "target_raspberry_pi"; then
+    AC_DEFINE([HAVE_LIBEGL],[1],["Define to 1 if you have the `EGL' library (-lEGL)."])
+    AC_DEFINE([HAVE_LIBGLESV2],[1],["Define to 1 if you have the `GLESv2' library (-lGLESv2)."])
+    AC_MSG_RESULT(== WARNING: OpenGLES support is assumed.)
+    LIBS="$LIBS -lEGL -lGLESv2 -lbcm_host -lvcos -lvchiq_arm -lmmal -lmmal_core -lmmal_util -lvcsm"
+  elif test "$with_gpu" = "mali"; then
+    AC_DEFINE([HAVE_LIBEGL],[1],["Define to 1 if you have the `EGL' library (-lEGL)."])
+    AC_DEFINE([HAVE_LIBGLESV2],[1],["Define to 1 if you have the `GLESv2' library (-lGLESv2)."])
+    AC_MSG_RESULT(== WARNING: OpenGLES support is assumed.)
+    LIBS="$LIBS -lEGL -lGLESv2"
+  elif test "$with_gpu" = "v3d"; then
+    AC_DEFINE([HAVE_LIBEGL],[1],["Define to 1 if you have the `EGL' library (-lEGL)."])
+    AC_DEFINE([HAVE_LIBGLESV2],[1],["Define to 1 if you have the `GLESv2' library (-lGLESv2)."])
+    AC_MSG_RESULT(== WARNING: OpenGLES support is assumed.)
+    LIBS="$LIBS -lEGL -lGLESv2 -lnxpl -lnexus"
+  elif test "$with_gpu" = "v3dplatform"; then
+    AC_DEFINE([HAVE_LIBEGL],[1],["Define to 1 if you have the `EGL' library (-lEGL)."])
+    AC_DEFINE([HAVE_LIBGLESV2],[1],["Define to 1 if you have the `GLESv2' library (-lGLESv2)."])
+    AC_MSG_RESULT(== WARNING: OpenGLES support is assumed.)
+    LIBS="$LIBS -lEGL -lGLESv2 -lv3dplatform"
+  elif test "$with_gpu" = "v3dvuplus"; then
+    AC_DEFINE([HAVE_LIBEGL],[1],["Define to 1 if you have the `EGL' library (-lEGL)."])
+    AC_DEFINE([HAVE_LIBGLESV2],[1],["Define to 1 if you have the `GLESv2' library (-lGLESv2)."])
+    AC_MSG_RESULT(== WARNING: OpenGLES support is assumed.)
+    LIBS="$LIBS -lEGL -lGLESv2"
   else
-    if test "$target_platform" = "target_raspberry_pi"; then
-      AC_DEFINE([HAVE_LIBEGL],[1],["Define to 1 if you have the `EGL' library (-lEGL)."])
-      AC_DEFINE([HAVE_LIBGLESV2],[1],["Define to 1 if you have the `GLESv2' library (-lGLESv2)."])
-      AC_MSG_RESULT(== WARNING: OpenGLES support is assumed.)
-      LIBS="$LIBS -lEGL -lGLESv2 -lbcm_host -lvcos -lvchiq_arm -lmmal -lmmal_core -lmmal_util -lvcsm"
-    else
-      AC_CHECK_LIB([EGL],   [main],, AC_MSG_ERROR($missing_library))
-      AC_CHECK_LIB([GLESv2],[main],, AC_MSG_ERROR($missing_library))
-    fi
+    AC_CHECK_LIB([EGL],   [main],, AC_MSG_ERROR($missing_library))
+    AC_CHECK_LIB([GLESv2],[main],, AC_MSG_ERROR($missing_library))
   fi
 else
   if test "$use_gl" = "yes"; then
@@ -1058,6 +1122,12 @@ AC_LANG_POP([C++])
 
 if test "${target_platform}" = "target_linux" || test "${target_platform}" = "target_raspberry_pi" || test "${target_platform}" = "target_android"; then
   PKG_CHECK_MODULES([UUID], [uuid],, AC_MSG_ERROR(libuuid not found))
+  PKG_CHECK_MODULES([AVFORMAT], [libavformat],, AC_MSG_ERROR(libavformat not found))
+  PKG_CHECK_MODULES([AVFILTER], [libavfilter],, AC_MSG_ERROR(libavfilter not found))
+  PKG_CHECK_MODULES([AVUTIL], [libavutil],, AC_MSG_ERROR(libavutil not found))
+  PKG_CHECK_MODULES([POSTPROC], [libpostproc],, AC_MSG_ERROR(libpostproc not found))
+  PKG_CHECK_MODULES([SWSCALE], [libswscale],, AC_MSG_ERROR(libswscale not found))
+  PKG_CHECK_MODULES([SWRESAMPLE], [libswresample],, AC_MSG_ERROR(libswresample not found))
 fi
 
 AC_MSG_CHECKING("for libcrossguid")
@@ -2330,6 +2400,10 @@ AC_SUBST(HAVE_SSE4)
 AC_SUBST(USE_MMAL)
 AC_SUBST(USE_X11)
 AC_SUBST(USE_OPTICAL_DRIVE)
+AC_SUBST(USE_MALI)
+AC_SUBST(USE_V3D)
+AC_SUBST(USE_E2_REMOTE)
+AC_SUBST(USE_HIPLAYER)
 
 # pushd and popd are not available in other shells besides bash, so implement
 # our own pushd/popd functions
diff --git a/xbmc/cores/playercorefactory/PlayerCoreConfig.h b/xbmc/cores/playercorefactory/PlayerCoreConfig.h
index 15a6570..a551d14 100644
--- a/xbmc/cores/playercorefactory/PlayerCoreConfig.h
+++ b/xbmc/cores/playercorefactory/PlayerCoreConfig.h
@@ -28,6 +28,9 @@
 #ifdef HAS_UPNP
 #include "network/upnp/UPnPPlayer.h"
 #endif
+#ifdef HAS_HIPLAYER
+#include "cores/HiPlayer/HiPlayer.h"
+#endif
 #include "utils/log.h"
 
 class CPlayerCoreConfig
@@ -93,6 +96,12 @@ public:
     {
       pPlayer = new PAPlayer(callback);
     }
+#if defined(HAS_HIPLAYER)
+    else if (m_type.compare("hiplayer") == 0)
+    {
+      pPlayer = new CHiPlayer(callback);
+    }
+#endif
     else if (m_type.compare("external") == 0)
     {
       pPlayer = new CExternalPlayer(callback);
diff --git a/xbmc/cores/playercorefactory/PlayerCoreFactory.cpp b/xbmc/cores/playercorefactory/PlayerCoreFactory.cpp
index 896b865..1e8747b 100644
--- a/xbmc/cores/playercorefactory/PlayerCoreFactory.cpp
+++ b/xbmc/cores/playercorefactory/PlayerCoreFactory.cpp
@@ -315,6 +315,12 @@ bool CPlayerCoreFactory::LoadConfiguration(const std::string &file, bool clear)
     m_vecCoreSelectionRules.clear();
 
     // Builtin players
+#if defined(HAS_HIPLAYER)
+    CPlayerCoreConfig* HiPlayer = new CPlayerCoreConfig("HiPlayer", "hiplayer", nullptr);
+    HiPlayer->m_bPlaysAudio = true;
+    HiPlayer->m_bPlaysVideo = true;
+    m_vecPlayerConfigs.push_back(HiPlayer);
+#endif
     CPlayerCoreConfig* VideoPlayer = new CPlayerCoreConfig("VideoPlayer", "video", nullptr);
     VideoPlayer->m_bPlaysAudio = true;
     VideoPlayer->m_bPlaysVideo = true;
@@ -347,6 +353,8 @@ bool CPlayerCoreFactory::LoadConfiguration(const std::string &file, bool clear)
         internaltype = "video";
       else if (type == "paplayer")
         internaltype = "music";
+      else if (type == "hiplayer")
+        internaltype = "hiplayer";
       else if (type == "externalplayer")
         internaltype = "external";
 
diff --git a/xbmc/guilib/GUIWindowManager.cpp b/xbmc/guilib/GUIWindowManager.cpp
index 5808f7e..6080dd1 100644
--- a/xbmc/guilib/GUIWindowManager.cpp
+++ b/xbmc/guilib/GUIWindowManager.cpp
@@ -73,6 +73,9 @@
 #include "windows/GUIWindowStartup.h"
 #include "video/windows/GUIWindowFullScreen.h"
 #include "video/dialogs/GUIDialogVideoOSD.h"
+#ifdef HAS_HIPLAYER
+#include "windows/GUIWindowSubtitles.h"
+#endif
 
 // Dialog includes
 #include "music/dialogs/GUIDialogMusicOSD.h"
@@ -299,6 +302,9 @@ void CGUIWindowManager::CreateWindows()
   Add(new CGUIWindowSplash);
 
   Add(new CGUIWindowEventLog);
+#ifdef HAS_HIPLAYER
+  Add(new CGUIWindowSubtitles); /* subtitle renderer */
+#endif
 
   Add(new GAME::CGUIControllerWindow);
 }
@@ -415,6 +421,9 @@ bool CGUIWindowManager::DestroyWindows()
 
     Remove(WINDOW_DIALOG_SEEK_BAR);
     Remove(WINDOW_DIALOG_VOLUME_BAR);
+#ifdef HAS_HIPLAYER
+    Remove(12666); /* subtitle renderer */
+#endif
 
     Delete(WINDOW_EVENT_LOG);
   }
diff --git a/xbmc/platform/xbmc.cpp b/xbmc/platform/xbmc.cpp
index 34e5ea6..714af8e 100644
--- a/xbmc/platform/xbmc.cpp
+++ b/xbmc/platform/xbmc.cpp
@@ -25,6 +25,11 @@
 #include "linux/RBP.h"
 #endif
 
+#ifdef HAS_V3DVISABLE
+#include <v3dplatform.h>
+  V3D_PlatformHandle g_v3dPlatformHandle;
+#endif
+
 #ifdef TARGET_WINDOWS
 #include <mmdeviceapi.h>
 #include "platform/win32/IMMNotificationClient.h"
@@ -55,6 +60,10 @@ extern "C" int XBMC_Run(bool renderGUI, CFileItemList &playlist)
     return status;
   }
 
+#ifdef HAS_V3DVISABLE
+  V3D_RegisterDisplayPlatform(&g_v3dPlatformHandle, NULL);
+#endif
+
 #ifdef TARGET_RASPBERRY_PI
   if(!g_RBP.Initialize())
     return false;
diff --git a/xbmc/windowing/egl/EGLWrapper.cpp b/xbmc/windowing/egl/EGLWrapper.cpp
index 30f5757..03e9a55 100644
--- a/xbmc/windowing/egl/EGLWrapper.cpp
+++ b/xbmc/windowing/egl/EGLWrapper.cpp
@@ -31,6 +31,12 @@
 #if defined(TARGET_RASPBERRY_PI)
   #include "EGLNativeTypeRaspberryPI.h"
 #endif
+#if defined(HAS_MALI)
+  #include "EGLNativeTypeMali.h"
+#endif
+#if defined(HAS_V3D)
+  #include "EGLNativeTypeV3D.h"
+#endif
 #if defined(HAS_IMXVPU)
   #include "EGLNativeTypeIMX.h"
 #endif
@@ -97,6 +103,10 @@ bool CEGLWrapper::Initialize(const std::string &implementation)
       (nativeGuess = CreateEGLNativeType<CEGLNativeTypeAndroid>(implementation))
 #elif defined(TARGET_RASPBERRY_PI)
       (nativeGuess = CreateEGLNativeType<CEGLNativeTypeRaspberryPI>(implementation))
+#elif defined(HAS_MALI)
+      (nativeGuess = CreateEGLNativeType<CEGLNativeTypeMali>(implementation))
+#elif defined(HAS_V3D)
+      (nativeGuess = CreateEGLNativeType<CEGLNativeTypeV3D>(implementation))
 #elif defined(HAS_IMXVPU)
       (nativeGuess = CreateEGLNativeType<CEGLNativeTypeIMX>(implementation))
 #elif defined(TARGET_LINUX) && defined(HAS_LIBAMCODEC)
diff --git a/xbmc/windowing/egl/Makefile.in b/xbmc/windowing/egl/Makefile.in
index 68f7862..ffbe781 100644
--- a/xbmc/windowing/egl/Makefile.in
+++ b/xbmc/windowing/egl/Makefile.in
@@ -12,6 +12,12 @@ endif
 ifeq (@USE_IMXVPU@,1)
 SRCS+= EGLNativeTypeIMX.cpp
 endif
+ifeq (@USE_MALI@,1)
+SRCS+= EGLNativeTypeMali.cpp
+endif
+ifeq (@USE_V3D@,1)
+SRCS+= EGLNativeTypeV3D.cpp
+endif
 SRCS+= EGLWrapper.cpp
 
 LIB = windowing_egl.a
diff --git a/xbmc/windows/Makefile b/xbmc/windows/Makefile
index a328db2..bc28883 100644
--- a/xbmc/windows/Makefile
+++ b/xbmc/windows/Makefile
@@ -13,5 +13,9 @@ SRCS=GUIMediaWindow.cpp \
 
 LIB=windows.a
 
+#ifdef HAS_HIPLAYER
+SRCS+= GUIWindowSubtitles.cpp
+#endif
+
 include ../../Makefile.include
 -include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
-- 
1.9.1
